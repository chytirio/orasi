---
services:
  # MinIO - S3-compatible object storage for Delta Lake
  minio:
    image: minio/minio:latest
    container_name: orasi-minio-dev
    ports:
      - "9000:9000"      # API port
      - "9001:9001"      # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_CONSOLE_ADDRESS: ":9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data_dev:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - orasi-network-dev
  
  # Postgres
  postgres:
    image: postgres:latest
    container_name: orasi-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orasi_dev
    networks:
      - orasi-network-dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: orasi-redis-dev
    ports:
      - "6379:6379"
    networks:
      - orasi-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bridge API Service (Debug)
  bridge-api:
    image: orasi/bridge-api:debug
    container_name: orasi-bridge-api-dev
    ports:
      - "8080:8080"      # REST API
      - "4317:4317"      # gRPC
      - "4318:4318"      # gRPC (HTTP)
      - "9090:9090"      # Metrics
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/orasi_dev
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ../../config:/app/config:ro
      - bridge_api_logs_dev:/app/logs
      - bridge_api_data_dev:/app/data
      - ./target:/app/target:ro  # Mount target for debugging
    networks:
      - orasi-network-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Schema Registry Service (Debug)
  schema-registry:
    image: orasi/schema-registry:debug
    container_name: orasi-schema-registry-dev
    ports:
      - "8081:8080"      # REST API
      - "9091:9090"      # Metrics
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/orasi_dev
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../../config:/app/config:ro
      - schema_registry_logs_dev:/app/logs
      - schema_registry_data_dev:/app/data
      - ./target:/app/target:ro  # Mount target for debugging
    networks:
      - orasi-network-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: ["/app/schema-registry", "serve", "--config", "/app/config/schema-registry.toml"]
  
  ballista-scheduler:
    image: ghcr.io/apache/datafusion-ballista-scheduler:48.0.0
    container_name: orasi-ballista-scheduler-dev
    command: "--bind-host 0.0.0.0"
    ports:
      - "50050:50050"
    environment:
      - RUST_LOG=ballista=info
    volumes:
      - ./benchmarks/data:/data
    networks:
      - orasi-network-dev
    healthcheck:
      test: ["CMD", "nc", "-z", "ballista-scheduler", "50050"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  ballista-executor:
    image: ghcr.io/apache/datafusion-ballista-executor:48.0.0
    container_name: orasi-ballista-executor-dev
    command: "--bind-host 0.0.0.0 --scheduler-host ballista-scheduler --scheduler-connect-timeout-seconds 15"
    deploy: { replicas: 1 }
    restart: always
    environment:
      - RUST_LOG=ballista=info
    volumes:
      - ./benchmarks/data:/data
    networks:
      - orasi-network-dev
    depends_on:
      - ballista-scheduler
    healthcheck:
      test: ["CMD", "nc", "-z", "ballista-executor", "50051"]
      interval: 5s
      timeout: 5s
      retries: 5
    

  # Controller Service (Debug)
  # controller:
  #   image: orasi/controller:debug
  #   container_name: orasi-controller-dev
  #   ports:
  #     - "8082:8080"      # REST API
  #     - "9092:9090"      # Metrics
  #   environment:
  #     - RUST_LOG=debug
  #     - RUST_BACKTRACE=1
  #     - PORT=8080
  #     - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/orasi_dev
  #     - REDIS_URL=redis://redis:6379
  #     - KUBECONFIG=/app/.kube/config
  #   volumes:
  #     - ./config:/app/config:ro
  #     - controller_logs_dev:/app/logs
  #     - controller_data_dev:/app/data
  #     - ~/.kube:/app/.kube:ro  # Mount kubeconfig if available
  #     - ./target:/app/target:ro  # Mount target for debugging
  #   networks:
  #     - orasi-network-dev
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: unless-stopped

  # Spark Master
  # spark-master:
  #   image: apache/spark:3.5.6
  #   container_name: orasi-spark-master-dev
  #   entrypoint: [/opt/spark/sbin/start-master.sh]
  #   ports:
  #     - "8083:8080"      # Spark Web UI
  #     - "7077:7077"      # Spark Master port
  #   environment:
  #     - SPARK_MODE=master
  #     - SPARK_NO_DAEMONIZE=true
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #   volumes:
  #     - spark_data_dev:/opt/spark/work-dir
  #     # - ./config/spark-defaults.conf:/spark/conf/spark-defaults.conf:ro
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  #   networks:
  #     - orasi-network-dev
  #   depends_on:
  #     minio:
  #       condition: service_healthy

  # # Spark Worker
  # spark-worker:
  #   image: apache/spark:3.5.6
  #   container_name: orasi-spark-worker-dev
  #   entrypoint: [/opt/spark/sbin/start-worker.sh]
  #   ports:
  #     - "8084:8081"      # Spark Worker Web UI
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_NO_DAEMONIZE=true
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=2G
  #     - SPARK_WORKER_CORES=2
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #     - SPARK_MASTER_HOST=spark-master
  #   volumes:
  #     - spark_data_dev:/opt/spark/work-dir
  #     - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8081"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  #   networks:
  #     - orasi-network-dev
  #   depends_on:
  #     spark-master:
  #       condition: service_healthy

  # # Spark History Server
  # spark-history:
  #   image: apache/spark:3.5.6
  #   container_name: orasi-spark-history-dev
  #   entrypoint: [/opt/spark/sbin/start-master.sh]
  #   ports:
  #     - "18080:18080"    # Spark History Server
  #   environment:
  #     - SPARK_MODE=history
  #     - SPARK_NO_DAEMONIZE=true
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #     - SPARK_MASTER_HOST=spark-master
  #   volumes:
  #     - spark_data_dev:/opt/spark/work-dir
  #     - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
  #   networks:
  #     - orasi-network-dev
  #   depends_on:
  #     spark-master:
  #       condition: service_healthy

volumes:
  minio_data_dev:
    driver: local
  postgres_data_dev:
    driver: local
  spark_data_dev:
    driver: local
  bridge_api_logs_dev:
    driver: local
  bridge_api_data_dev:
    driver: local
  schema_registry_logs_dev:
    driver: local
  schema_registry_data_dev:
    driver: local
  controller_logs_dev:
    driver: local
  controller_data_dev:
    driver: local

networks:
  orasi-network-dev:
    driver: bridge
