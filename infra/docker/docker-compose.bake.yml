---
services:
  # MinIO - S3-compatible object storage for Delta Lake
  minio:
    image: minio/minio:latest
    container_name: orasi-minio
    ports:
      - "9000:9000"      # API port
      - "9001:9001"      # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_CONSOLE_ADDRESS: ":9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - orasi-network
  
  # Postgres
  postgres:
    image: postgres:latest
    container_name: orasi-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orasi
    networks:
      - orasi-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: orasi-redis
    ports:
      - "6379:6379"
    networks:
      - orasi-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bridge API Service
  bridge-api:
    image: orasi/bridge-api:${BUILD_TYPE:-release}
    container_name: orasi-bridge-api
    ports:
      - "8080:8080"      # REST API
      - "4317:4317"      # gRPC
      - "4318:4318"      # gRPC (HTTP)
      - "9090:9090"      # Metrics
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-1}
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/orasi
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ../../config:/app/config:ro
      - bridge_api_logs:/app/logs
      - bridge_api_data:/app/data
    networks:
      - orasi-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Schema Registry Service
  schema-registry:
    image: orasi/schema-registry:${BUILD_TYPE:-release}
    container_name: orasi-schema-registry
    ports:
      - "8081:8081"      # REST API
      - "9091:9090"      # Metrics
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-1}
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/orasi
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../../config:/app/config:ro
      - schema_registry_logs:/app/logs
      - schema_registry_data:/app/data
    networks:
      - orasi-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: ["/app/schema-registry", "serve", "--config", "/app/config/schema-registry.toml"]

  # Controller Service (Kubernetes controller)
  controller:
    image: orasi/controller:${BUILD_TYPE:-release}
    container_name: orasi-controller
    ports:
      - "8082:8080"      # REST API
      - "9092:9090"      # Metrics
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-1}
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/orasi
      - REDIS_URL=redis://redis:6379
      - KUBECONFIG=/app/.kube/config
    volumes:
      - ../../config:/app/config:ro
      - controller_logs:/app/logs
      - controller_data:/app/data
      - ~/.kube:/app/.kube:ro  # Mount kubeconfig if available
    networks:
      - orasi-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Spark Master
  spark-master:
    image: apache/spark:3.5.0-bin-hadoop3.3
    container_name: orasi-spark-master
    ports:
      - "8083:8080"      # Spark Web UI
      - "7077:7077"      # Spark Master port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark_data:/opt/bitnami/spark/work
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - orasi-network
    depends_on:
      minio:
        condition: service_healthy

  # Spark Worker
  spark-worker:
    image: apache/spark:3.5.6
    container_name: orasi-spark-worker
    ports:
      - "8084:8081"      # Spark Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark_data:/opt/spark/work-dir
      - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - orasi-network
    depends_on:
      spark-master:
        condition: service_healthy

  # Spark History Server
  spark-history:
    image: apache/spark:3.5.6
    container_name: orasi-spark-history
    ports:
      - "18080:18080"    # Spark History Server
    environment:
      - SPARK_MODE=history
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark_data:/opt/spark/work-dir
      - ./config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    networks:
      - orasi-network
    depends_on:
      spark-master:
        condition: service_healthy

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local
  spark_data:
    driver: local
  bridge_api_logs:
    driver: local
  bridge_api_data:
    driver: local
  schema_registry_logs:
    driver: local
  schema_registry_data:
    driver: local
  controller_logs:
    driver: local
  controller_data:
    driver: local

networks:
  orasi-network:
    driver: bridge
